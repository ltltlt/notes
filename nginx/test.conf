# http://nginx.org/en/docs/http/ngx_http_rewrite_module.html
# https://openresty.org/download/agentzh-nginx-tutorials-zhcn.html

server {
	listen       80;
	server_name  test.nginx;
	access_log /var/log/nginx/access.test.log;
	error_log /var/log/nginx/error.test.log;
	default_type text/plain;

# outside location, (which rewrite belongs to server-rewrite phase), break and last are exactly the same, because it will always go to find-config phase(eg: find-config phase is behind server-rewrite phase but before rewrite phase)

	location / {
		# echo execute in content phase, so this will not execute first even it's in the top of location
		echo "var is: $var";
		echo "var1 is: $var1";

		# $request_uri is always the original request uri as received from the client. This cannot be modified
		# $uri is the current request URI, without arguments. This variable will reflect any modifications done so far by internal redirects or the index module.
		echo "origin uri: $request_uri";
		echo "uri: $uri";			# this prove break will change uri but not change location

		set $var abc;
		set $var1 abc;
		
		# rewrite ... break; will change url and continue this location
		# this is useful to change uri for static file(try-files, index, autoindex, static)
		rewrite ^ /foo break;
		set_by_lua $var "return 'c'";	# not execute, because this directive in fact insert into something into ngx_rewrite module; so order is determinated

		# this directive execute in ngx_rewrite phase, but not insert something into ngx_rewrite module, instead this always execute in the tail of rewrite phase
		# this can prove 'rewrite x y break;' not goto post-rewrite, instead, it only leave ngx_rewrite phase and goto other rewrite phase module
		rewrite_by_lua "ngx.var.var1='c'";
	}

	location = /foo {
		echo "origin uri: $request_uri";
		echo "foo $var";
	}
}
